#include "UnityCG.glslinc"
#include "GLSLSupport.glslinc"

#if defined(CNOISE) || defined(PNOISE)

    #if defined(THREED)
        #include "ClassicNoise3D.glsl"
    #else
        #include "ClassicNoise2D.glsl"
    #endif

    #define INITIAL_WEIGHT 0.5

    #if defined(GRAD_ANALYTICAL)
        #define NOISE_FUNC(coord, period) 0
    #elif defined(CNOISE)
        #define NOISE_FUNC(coord, period) cnoise(coord)
    #else // PNOISE
        #define NOISE_FUNC(coord, period) pnoise(coord, period)
    #endif

#endif

#if defined(SNOISE)

    #if defined(THREED)
        #if defined(GRAD_ANALYTICAL)
            #include "SimplexNoiseGrad3D.glsl"
        #else
            #include "SimplexNoise3D.glsl"
        #endif
    #else
        #if defined(GRAD_NUMERICAL)
            #include "SimplexNoiseGrad2D.glsl"
        #else
            #include "SimplexNoise2D.glsl"
        #endif
    #endif

    #define INITIAL_WEIGHT 0.25

    #if defined(GRAD_ANALYTICAL)
        #define NOISE_FUNC(coord, period) snoise_grad(coord)
    #else
        #define NOISE_FUNC(coord, period) snoise(coord)
    #endif

#endif

#if defined(BCCNOISE4)

    #include "bccNoise4Point.glsl"

    #define INITIAL_WEIGHT 0.25

    #if defined(THREED)
        #if defined(GRAD_ANALYTICAL)
            #define NOISE_FUNC(coord, period) (bccNoiseClassic(coord).xyz)
        #else
            #define NOISE_FUNC(coord, period) (bccNoiseClassic(coord).w)
        #endif
    #else
        #if defined(GRAD_ANALYTICAL)
            #define NOISE_FUNC(coord, period) (bccNoisePlaneFirst(vec3(coord, 0)).xy)
        #else
            #define NOISE_FUNC(coord, period) (bccNoisePlaneFirst(vec3(coord, 0)).w)
        #endif
    #endif

#endif

#if defined(BCCNOISE8)

    #include "bccNoise8Point.glsl"

    #define INITIAL_WEIGHT 0.25

    #if defined(THREED)
        #if defined(GRAD_ANALYTICAL)
            #define NOISE_FUNC(coord, period) (bccNoiseDerivatives_XYZ(coord).xyz)
        #else
            #define NOISE_FUNC(coord, period) (bccNoiseDerivatives_XYZ(coord).w)
        #endif
    #else
        #if defined(GRAD_ANALYTICAL)
            #define NOISE_FUNC(coord, period) (bccNoiseDerivatives_PlaneFirst(vec3(coord, 0)).xy)
        #else
            #define NOISE_FUNC(coord, period) (bccNoiseDerivatives_PlaneFirst(vec3(coord, 0)).w)
        #endif
    #endif

#endif

#ifdef VERTEX

varying vec2 uv;

void main()
{
    gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
    uv = gl_MultiTexCoord0.xy;
}

#endif

#ifdef FRAGMENT

varying vec2 uv;

void main()
{
    const float epsilon = 0.0001;

    vec2 uv = uv.xy * 4.0 + vec2(0.2, 1.0) * _Time.y;

    #if defined(GRAD_ANALYTICAL) || defined(GRAD_NUMERICAL)
        #if defined(THREED)
            vec3 o = vec3(0.5);
        #else
            vec2 o = vec2(0.5);
        #endif
    #else
        float o = 0.5;
    #endif

    float s = 1.0;
    float w = INITIAL_WEIGHT;

    #if defined(FRACTAL)
    for (int i = 0; i < 6; i++)
    #endif
    {
        #if defined(THREED)
            vec3 coord = vec3(uv * s, _Time.y);
            vec3 period = vec3(s, s, 1.0) * 2.0;
        #else
            vec2 coord = uv * s;
            vec2 period = vec2(s) * 2.0;
        #endif

        #if defined(GRAD_NUMERICAL)
            #if defined(THREED)
                float v0 = NOISE_FUNC(coord, period);
                float vx = NOISE_FUNC(coord + vec3(epsilon, 0, 0), period);
                float vy = NOISE_FUNC(coord + vec3(0, epsilon, 0), period);
                float vz = NOISE_FUNC(coord + vec3(0, 0, epsilon), period);
                o += w * vec3(vx - v0, vy - v0, vz - v0) / epsilon;
            #else
                float v0 = NOISE_FUNC(coord, period);
                float vx = NOISE_FUNC(coord + vec2(epsilon, 0), period);
                float vy = NOISE_FUNC(coord + vec2(0, epsilon), period);
                o += w * vec2(vx - v0, vy - v0) / epsilon;
            #endif
        #else
            o += NOISE_FUNC(coord, period) * w;
        #endif

        s *= 2.0;
        w *= 0.5;
    }

    #if defined(GRAD_ANALYTICAL) || defined(GRAD_NUMERICAL)
        #if defined(THREED)
            gl_FragColor = vec4(o, 1);
        #else
            gl_FragColor = vec4(o, 1, 1);
        #endif
    #else
        gl_FragColor = vec4(o, o, o, 1);
    #endif
}

#endif

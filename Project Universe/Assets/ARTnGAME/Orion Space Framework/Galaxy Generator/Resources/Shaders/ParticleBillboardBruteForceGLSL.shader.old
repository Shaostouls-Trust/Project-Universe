Shader "Galaxy/ParticleBillboardBruteForceGLSL" 
{
	Properties 
	{
		_Color ("Overlay Color",COLOR) = (1,1,1,1)
		_MainTex ("Base (RGB)", 2D) = "white" {}

		MySrcMode ("SrcMode", Float) = 0
		MyDstMode ("DstMode", Float) = 0
	}

	SubShader 
	{
		Pass
		{
			Tags { "Queue"="Transparent" "IgnoreProjector"="True" "RenderType"="Transparent" }
			Blend [MySrcMode] [MyDstMode]
			Lighting Off ZWrite Off Fog { Color (0,0,0,0) }
			Cull Off
			LOD 200
		
			GLSLPROGRAM 
				#version 120

				varying vec2 textureCoords;
				varying vec4 color;

				uniform vec4 _Color;
				uniform sampler2D _MainTex;
				uniform float MaxScreenSize;
				uniform float TextureSheetPower;
				uniform vec4 _WorldSpaceCameraPos; 

				#ifdef VERTEX 
				
				vec4 quat_from_axis_angle(vec3 axis, float angle)
				{ 
				  vec4 qr;
				  float half_angle = (angle * 0.5);
				  qr.x = axis.x * sin(half_angle);
				  qr.y = axis.y * sin(half_angle);
				  qr.z = axis.z * sin(half_angle);
				  qr.w = cos(half_angle);
				  return qr;
				}

				vec4 quat_conj(vec4 q)
				{ 
				  return vec4(-q.x, -q.y, -q.z, q.w); 
				}
				  
				vec4 quat_mult(vec4 q1, vec4 q2)
				{ 
				  vec4 qr;
				  qr.x = (q1.w * q2.x) + (q1.x * q2.w) + (q1.y * q2.z) - (q1.z * q2.y);
				  qr.y = (q1.w * q2.y) - (q1.x * q2.z) + (q1.y * q2.w) + (q1.z * q2.x);
				  qr.z = (q1.w * q2.z) + (q1.x * q2.y) - (q1.y * q2.x) + (q1.z * q2.w);
				  qr.w = (q1.w * q2.w) - (q1.x * q2.x) - (q1.y * q2.y) - (q1.z * q2.z);
				  return qr;
				}

				vec3 rotate_vertex_position(vec3 position, vec3 axis, float angle)
				{ 
				  vec4 qr = quat_from_axis_angle(axis, angle);
				  vec4 qr_conj = quat_conj(qr);
				  vec4 q_pos = vec4(position.x, position.y, position.z, 0);
				  
				  vec4 q_tmp = quat_mult(qr, q_pos);
				  qr = quat_mult(q_tmp, qr_conj);
				  
				  return vec3(qr.x, qr.y, qr.z);
				}
				
				void main()
				{
					color = gl_Color;
					
					//inverse view matrix
					vec4 pos =  gl_Vertex;
					vec4 info = gl_MultiTexCoord0;
					vec3 localPos  = gl_Normal;
					vec3 worldPos = (gl_ProjectionMatrix * pos).xyz;
					
					float distance = length(_WorldSpaceCameraPos - pos);
					vec3 look = normalize(_WorldSpaceCameraPos - pos).xyz;
					vec3 up = vec3(0.0,1.0,0.0);
					
					//the rotation matrix
					//mat4 rotateM = rotate(vec3(0,0,info.y),vec4(0,0,0,0));
					up = rotate_vertex_position(up,vec3(0.0,0.0,1.0),info.y);
					//rotate the up vector to match the camera up
					up = (gl_ModelViewMatrixInverse * vec4(up,0)).xyz;
					vec3 right = cross(up, look);

					//individual size of particle
					float size = min(info.x,info.x * distance * MaxScreenSize);
					gl_Position = gl_ModelViewProjectionMatrix * (pos + vec4(((right * 0.5) * localPos.x)  - ((up * 0.5) * localPos.y),0) * size);
					textureCoords = vec2((localPos.x + 1.0) / 2.0,(localPos.y + 1.0) / 2.0);
				}
				#endif

				#ifdef FRAGMENT
				void main()
				{
					vec4 col = texture2D(_MainTex, textureCoords);
					gl_FragColor   = col * color * _Color;
				}
				#endif

			ENDGLSL
		}
	} 
}

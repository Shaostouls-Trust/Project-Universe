using UnityEngine;
#if UNITY_EDITOR
using UnityEditor;
#endif

using System.Collections;
using System.Collections.Generic;
using System.Linq;

using AXGeometry;

using AX.Generators;

//using AX;
//using AX.Generators;

namespace AX
{


	[ExecuteInEditMode()]
	public class AXGameObject : MonoBehaviour
	{

		/*
		 * This is a bookkeeping script to help a GameObject created by Archimatix
		 * link back to the ParamtriObject that created it.
		 * 
		 * This way, by selecting this object in the SceneView, you can select the PO
		 * that created it.
		 * 
		 * If this is a combined mesh, then only a top level PO will be selected. From there, one
		 * can burrow down in the Archimatix editor window to fin the controls she is looking for.
		 */


		public string makerPO_GUID;

		public string _consumerAddress; // for example, grid location in a GridRepeater
		public string consumerAddress
		{
			get
			{

				return _consumerAddress;
			}
			set
			{

				_consumerAddress = value;
			}

		}


		// ANCESTRY
		// The ancestry of this gameObject is based on its scene heirarchy.
		// It allows multiple clicks on a GameObject in the scene to repeat click up the heirarchy.
		[System.NonSerialized]
		public CycleList<Transform> _ancestry;
		public CycleList<Transform> ancestry
		{
			get
			{
				if (_ancestry == null)
					_ancestry = ArchimatixUtils.getTransformAncestry(gameObject);
				return _ancestry;
			}

		}

		[System.NonSerialized]
		private AXModel _model;
		public AXModel model
		{
			get
			{
				if (_model == null)
					_model = ancestry.Last().GetComponent<AXModel>();

				return _model;
			}
			set { _model = value; }

		}


		// PARAMETRIC_OBJECT
		// Each GameObject generated by AX
		// can have only one ParametricObject that created it.

		[System.NonSerialized]
		private AXParametricObject _parametricObject;
		public AXParametricObject parametricObject
		{
			get
			{
				if (_parametricObject == null && model != null)
					_parametricObject = model.getParametricObjectByGUID(makerPO_GUID);

				return _parametricObject;
			}
			set { _parametricObject = value; }
		}


		[System.NonSerialized]
		public Matrix4x4 consumerMatrix;

		// VOLUME
		// The volume of this object is generally useful. For example, to calculate mass.
		public float volume;
		public float mass;

		// ON_SELECT
		// When you click on an AX-gerneated GameObject in the scene, 
		// AX selects a PO in the AX NodeGraph.
		// It finds its consumerMatrix and then sets the matrix up its DependsOn chain using setSelectedConsumerOfAllInputs()

		public void OnSelect()
		{
			//Debug.Log("AXGameObject: OnSelect - " + this.parametricObject.Name);

			if (transform.parent == null)
				return;


			if (model == null)
				return;

			if (model.selectedPOs != null)
				model.selectedPOs.Clear();

			model.clickSelectedAXGO = this;
			model.cycleSelectedAXGO = this;

			// To support "cycle select" functionality
			model.selectedTransfromAncestry = ancestry;


			// SET WORLD_DISPLAY_MATRIX
			// Foreach Ancestor GO in the scene heirachy...
			// use the GO's location in SceneView space of each ancestor GO 
			// to set the worldDisplayMatrix for the PO that generated that GO.

			AXGameObject ancestorAXGO = null;


			for (int i = 0; i < ancestry.Count; i++)
			{

				//Debug.Log("["+i+"] " + ancestry[i].gameObject.name);
				ancestorAXGO = ancestry[i].gameObject.GetComponent<AXGameObject>();

				if (ancestorAXGO == null || ancestorAXGO.parametricObject == null || ancestorAXGO.parametricObject.generator is Instance || ancestorAXGO.parametricObject.generator is Replicant)
				{
					//if (ancestorAXGO)
					//Debug.Log("Nope "+ancestorAXGO.parametricObject.Name);
					continue;
				}


				if (ancestry[i] == null || parametricObject == null)
					continue;

				// SET_worldDisplayMatrix
				ancestorAXGO.parametricObject.consumerMatrix = model.transform.localToWorldMatrix.inverse * ancestry[i].localToWorldMatrix * parametricObject.getLocalMatrix().inverse;

				if (i < (ancestry.Count - 2))
				{
					AXGameObject consumerAXGO = ancestry[i + 1].gameObject.GetComponent<AXGameObject>();

					if (consumerAXGO != null && consumerAXGO.parametricObject != null)
					{
						//Debug.Log("!!!!!!!!!!!!!!!!!!!!!!! "+ancestorAXGO.parametricObject.Name+".selectedConsumer = " + consumerAXGO.parametricObject.Name);
						ancestorAXGO.parametricObject.selectedConsumer = consumerAXGO.parametricObject;
					}
				}

				if (!string.IsNullOrEmpty(ancestorAXGO.consumerAddress))
				{
					Debug.Log("YUP");
					ancestorAXGO.parametricObject.selectedConsumerAddress = ancestorAXGO.consumerAddress;
					//Debug.Log("ancestorAXGO.parametricObject.selectedConsumerAddress="+ancestorAXGO.parametricObject.selectedConsumerAddress);
				}
			}
			model.cycleSelectedPO = parametricObject;

			model.selectPO(parametricObject);

			if (parametricObject == null)
				return;

			parametricObject.generator.adjustWorldMatrices();

			// NOW SET CONSUMER_M's UPSTREAM...
			// This is a key step. 
			if (!(parametricObject.generator is Instance))
			{
				//Debug.Log("Nope 2 "+parametricObject.Name);
				parametricObject.setSelectedConsumerOfAllInputs();

			}
			parametricObject.selectedAXGO = this;

		}





	}

}

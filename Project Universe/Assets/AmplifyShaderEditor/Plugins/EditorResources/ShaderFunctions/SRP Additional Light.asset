%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 78b2425a2284af743826c689403a4924, type: 3}
  m_Name: SRP Additional Light
  m_EditorClassIdentifier: 
  m_functionInfo: "// Made with Amplify Shader Editor v1.9.1.4\n// Available at the
    Unity Asset Store - http://u3d.as/y3X \n/*ASEBEGIN\nVersion=19104\nNode;AmplifyShaderEditor.CommentaryNode;74;-2614.414,-784.2527;Inherit;False;629.9463;277.3544;Comment;3;73;75;76;Normalized
    Screen  UV;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;67;-867.9353,1481.735;Inherit;False;1393.582;499.9396;;9;0;30;19;6;39;23;59;62;21;Main
    Switch;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;66;-2609.233,465.7281;Inherit;False;1086.717;223.2803;;2;32;33;Shadow
    Mask;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;65;-865.8872,61.44634;Inherit;False;1957.109;1222.4;;18;63;69;72;77;64;71;70;106;13;55;49;14;15;16;18;61;27;107;Specular;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;60;-859.6166,-930.9754;Inherit;False;1947.494;823.0533;;14;104;105;56;22;79;78;58;26;81;82;54;48;80;57;Half
    Lambert;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;53;-2619.122,-57.4623;Inherit;False;1141.001;424.3999;;7;12;9;4;10;2;11;50;World
    Normal;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;52;-2608.642,-424.6649;Inherit;False;467.4869;233;;2;44;3;World
    Pos;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;40;-864.586,-1933.467;Inherit;False;1911.6;826.1958;;14;102;103;86;5;87;37;25;38;84;85;51;47;83;41;Lambert;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;36;-857.6926,-2831.498;Inherit;False;1897.849;714.1954;;13;101;100;29;24;89;88;92;90;31;35;8;91;45;Flat;1,1,1,1;0;0\nNode;AmplifyShaderEditor.Vector3Node;10;-2569.122,-6.462288;Inherit;False;Constant;_Vector0;Vector
    0;0;0;Create;True;0;0;0;False;0;False;0,0,1;0,0,0;0;4;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3\nNode;AmplifyShaderEditor.FunctionSwitch;9;-1991.121,55.53762;Inherit;False;Normal
    Space;False;0;2;1;Tangent Space;World Space;Object;-1;9;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;2;FLOAT;0;False;3;FLOAT;0;False;4;FLOAT;0;False;5;FLOAT;0;False;6;FLOAT;0;False;7;FLOAT;0;False;8;FLOAT;0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.FunctionInput;11;-2201.121,153.5377;Inherit;False;World
    Normal;3;1;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.WorldPosInputsNode;3;-2558.642,-374.6649;Inherit;False;0;4;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3\nNode;AmplifyShaderEditor.RegisterLocalVarNode;50;-1697.1,29.00105;Inherit;False;worldNormalValue;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.RegisterLocalVarNode;44;-2366.155,-370.2155;Inherit;False;worldPosValue;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.FunctionInput;2;-2399.121,-6.462288;Inherit;False;Normal;3;0;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.ScreenPosInputsNode;73;-2565.427,-703.8398;Inherit;False;0;False;0;5;FLOAT4;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4\nNode;AmplifyShaderEditor.RegisterLocalVarNode;75;-2188.775,-704.577;Inherit;False;ScreenUV;-1;True;1;0;FLOAT2;0,0;False;1;FLOAT2;0\nNode;AmplifyShaderEditor.SwizzleNode;76;-2364.188,-703.7112;Inherit;False;FLOAT2;0;1;2;3;1;0;FLOAT4;0,0,0,0;False;1;FLOAT2;0\nNode;AmplifyShaderEditor.GetLocalVarNode;59;-817.9353,1780.379;Inherit;False;58;halfLambertResult;1;0;OBJECT;;False;1;FLOAT;0\nNode;AmplifyShaderEditor.Vector3Node;21;-170.8523,1793.675;Inherit;False;Constant;_Vector1;Vector
    1;0;0;Create;True;0;0;0;False;0;False;0,0,0;0,0,0;0;4;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3\nNode;AmplifyShaderEditor.GetLocalVarNode;62;-523.5779,1817.977;Inherit;False;61;specularResult;1;0;OBJECT;;False;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionInput;32;-2109.172,556.0287;Inherit;False;Shadow
    Mask;4;5;False;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0\nNode;AmplifyShaderEditor.FunctionNode;99;-2451.57,561.3016;Inherit;False;Shadow
    Mask;-1;;8;b50f5becdd6b8504a861ba5b9b861159;0;1;3;FLOAT2;0,0;False;1;FLOAT4;0\nNode;AmplifyShaderEditor.GetLocalVarNode;39;-807.5874,1679.115;Inherit;False;38;lambertResult;1;0;OBJECT;;False;1;FLOAT;0\nNode;AmplifyShaderEditor.GetLocalVarNode;30;-648.8014,1531.735;Inherit;False;29;FlatResult;1;0;OBJECT;;False;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionSwitchByPipeline;19;118.5464,1671.075;Inherit;False;4;0;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;1;FLOAT;0;False;2;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.FunctionSwitch;6;-215.3523,1647.675;Inherit;False;Lighting
    Mode;False;0;3;0;Flat;Lambert;Specular;Object;-1;9;0;FLOAT;0;False;1;FLOAT;0;False;2;FLOAT;0;False;3;FLOAT;0;False;4;FLOAT;0;False;5;FLOAT;0;False;6;FLOAT;0;False;7;FLOAT;0;False;8;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionSwitch;23;-519.7891,1679.751;Inherit;False;Half
    Lambert;True;0;2;2;In 0;In 1;Object;-1;9;0;FLOAT;0;False;1;FLOAT;0;False;2;FLOAT;0;False;3;FLOAT;0;False;4;FLOAT;0;False;5;FLOAT;0;False;6;FLOAT;0;False;7;FLOAT;0;False;8;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionOutput;0;390.6463,1689.275;Inherit;False;True;-1;Out;0;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.FunctionInput;15;-576.5212,486.2695;Inherit;False;View
    Dir;3;2;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.GetLocalVarNode;49;-635.9885,300.726;Inherit;False;44;worldPosValue;1;0;OBJECT;;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.GetLocalVarNode;55;-649.7278,386.0311;Inherit;False;50;worldNormalValue;1;0;OBJECT;;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.FunctionInput;18;-601.7596,695.4026;Inherit;False;Smoothness;1;4;False;1;0;FLOAT;0.5;False;1;FLOAT;0\nNode;AmplifyShaderEditor.SwitchBySRPVersionNode;72;262.1246,786.7374;Inherit;False;7;0;FLOAT;0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionSwitch;27;588.2983,483.1735;Inherit;False;Option;False;0;2;3;In
    0;In 1;Instance;24;9;0;FLOAT;0;False;1;FLOAT;0;False;2;FLOAT;0;False;3;FLOAT;0;False;4;FLOAT;0;False;5;FLOAT;0;False;6;FLOAT;0;False;7;FLOAT;0;False;8;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.RegisterLocalVarNode;61;862.112,484.8698;Inherit;False;specularResult;-1;True;1;0;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.ViewDirInputsCoordNode;16;-804.8486,488.4904;Inherit;False;World;False;0;4;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3\nNode;AmplifyShaderEditor.GetLocalVarNode;47;-670.2794,-1766.73;Inherit;False;44;worldPosValue;1;0;OBJECT;;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.GetLocalVarNode;51;-679.5432,-1620.793;Inherit;False;50;worldNormalValue;1;0;OBJECT;;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.SwitchBySRPVersionNode;85;214.0775,-1466.612;Inherit;False;7;0;FLOAT;0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.SwitchBySRPVersionNode;84;210.5872,-1825.308;Inherit;False;7;0;FLOAT;0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionSwitch;25;563.1213,-1640.653;Inherit;False;Option;False;0;2;3;In
    0;In 1;Instance;24;9;0;FLOAT;0;False;1;FLOAT;0;False;2;FLOAT;0;False;3;FLOAT;0;False;4;FLOAT;0;False;5;FLOAT;0;False;6;FLOAT;0;False;7;FLOAT;0;False;8;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.RegisterLocalVarNode;38;821.9526,-1640.653;Inherit;False;lambertResult;-1;True;1;0;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.GetLocalVarNode;45;-683.7148,-2683.931;Inherit;False;44;worldPosValue;1;0;OBJECT;;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.SwitchBySRPVersionNode;88;193.5458,-2741.982;Inherit;False;7;0;FLOAT;0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.SwitchBySRPVersionNode;89;200.5739,-2485.346;Inherit;False;7;0;FLOAT;0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.RegisterLocalVarNode;29;816.1079,-2604.833;Inherit;False;FlatResult;-1;True;1;0;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionSwitch;24;542.7292,-2604.125;Inherit;False;Use
    Shadow Mask;True;0;2;3;In 0;In 1;Object;-1;9;0;FLOAT;0;False;1;FLOAT;0;False;2;FLOAT;0;False;3;FLOAT;0;False;4;FLOAT;0;False;5;FLOAT;0;False;6;FLOAT;0;False;7;FLOAT;0;False;8;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionInput;14;-612.1022,591.7184;Inherit;False;Specular
    Color;3;3;False;1;0;FLOAT3;1,1,1;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;100;-228.5672,-2739.249;Inherit;False;float3
    Color = 0@$#ifdef _ADDITIONAL_LIGHTS$\tuint lightCount = GetAdditionalLightsCount()@$\tfor
    (uint lightIndex = 0u@ lightIndex < lightCount@ ++lightIndex)$\t{$\t\tLight light
    = GetAdditionalLight(lightIndex, WorldPosition)@$\t\tColor += light.color *(light.distanceAttenuation
    * light.shadowAttenuation)@\t$\t}$#endif$return Color@;3;Create;1;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;AdditionalLightsFlat10x;False;False;0;;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;8;-227.6957,-2665.572;Inherit;False;float3
    Color = 0@$#ifdef _ADDITIONAL_LIGHTS$\tuint lightCount = GetAdditionalLightsCount()@$\tLIGHT_LOOP_BEGIN(
    lightCount )$\t\tLight light = GetAdditionalLight(lightIndex, WorldPosition)@$\t\tColor
    += light.color *(light.distanceAttenuation * light.shadowAttenuation)@\t$\tLIGHT_LOOP_END$#endif$return
    Color@;3;Create;1;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;AdditionalLightsFlat12x;False;False;0;;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;91;-229.3849,-2597.085;Inherit;False;float3
    Color = 0@$#if defined(_ADDITIONAL_LIGHTS)$\t#define SUM_LIGHT(Light)\\$\t\tColor
    += Light.color * ( Light.distanceAttenuation * Light.shadowAttenuation )@$$\tInputData
    inputData = (InputData)0@$\tinputData.normalizedScreenSpaceUV = ScreenUV@$\tinputData.positionWS
    = WorldPosition@$$\tuint meshRenderingLayers = GetMeshRenderingLayer()@\t$\tuint
    pixelLightCount = GetAdditionalLightsCount()@\t$$\t#if USE_FORWARD_PLUS$\tfor
    (uint lightIndex = 0@ lightIndex < min(URP_FP_DIRECTIONAL_LIGHTS_COUNT, MAX_VISIBLE_LIGHTS)@
    lightIndex++)$\t{$\t\tFORWARD_PLUS_SUBTRACTIVE_LIGHT_CHECK$$\t\tLight light =
    GetAdditionalLight(lightIndex, WorldPosition)@$\t\t#ifdef _LIGHT_LAYERS$\t\tif
    (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))$\t\t#endif$\t\t{$\t\t\tSUM_LIGHT(
    light )@$\t\t}$\t}$\t#endif$$\tLIGHT_LOOP_BEGIN( pixelLightCount )$\t\tLight
    light = GetAdditionalLight(lightIndex, WorldPosition)@$\t\t#ifdef _LIGHT_LAYERS$\t\tif
    (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))$\t\t#endif$\t\t{$\t\t\tSUM_LIGHT(
    light )@$\t\t}$\tLIGHT_LOOP_END$#endif$return Color@$;3;Create;2;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;ScreenUV;FLOAT2;0,0;In;;Inherit;False;AdditionalLightsFlat14x;False;False;0;;False;2;0;FLOAT3;0,0,0;False;1;FLOAT2;0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;101;-221.2278,-2475.274;Inherit;False;float3
    Color = 0@$#ifdef _ADDITIONAL_LIGHTS$\tuint lightCount = GetAdditionalLightsCount()@$\tfor
    (uint lightIndex = 0u@ lightIndex < lightCount@ ++lightIndex)$\t{$\t\t#if ASE_SRP_VERSION
    >= 100000$\t\tLight light = GetAdditionalLight(lightIndex, WorldPosition, ShadowMask)@$\t\t#else$\t\tLight
    light = GetAdditionalLight(lightIndex, WorldPosition)@$\t\t#endif$\t\tColor +=
    light.color *(light.distanceAttenuation * light.shadowAttenuation)@$\t}$#endif$return
    Color@;3;Create;2;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;ShadowMask;FLOAT4;0,0,0,0;In;;Inherit;False;AdditionalLightsFlatMask10x;False;False;0;;False;2;0;FLOAT3;0,0,0;False;1;FLOAT4;0,0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;31;-220.5324,-2384.423;Inherit;False;float3
    Color = 0@$#ifdef _ADDITIONAL_LIGHTS$\tuint lightCount = GetAdditionalLightsCount()@$\tLIGHT_LOOP_BEGIN(
    lightCount )$\t\t#if ASE_SRP_VERSION >= 100000$\t\tLight light = GetAdditionalLight(lightIndex,
    WorldPosition, ShadowMask)@$\t\t#else$\t\tLight light = GetAdditionalLight(lightIndex,
    WorldPosition)@$\t\t#endif$\t\tColor += light.color *(light.distanceAttenuation
    * light.shadowAttenuation)@$\tLIGHT_LOOP_END$#endif$return Color@;3;Create;2;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;ShadowMask;FLOAT4;0,0,0,0;In;;Inherit;False;AdditionalLightsFlatMask12x;False;False;0;;False;2;0;FLOAT3;0,0,0;False;1;FLOAT4;0,0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;92;-220.9564,-2292.567;Inherit;False;float3
    Color = 0@$#if defined(_ADDITIONAL_LIGHTS)$\t#define SUM_LIGHT(Light)\\$\t\tColor
    += Light.color * ( Light.distanceAttenuation * Light.shadowAttenuation )@$$\tInputData
    inputData = (InputData)0@$\tinputData.normalizedScreenSpaceUV = ScreenUV@$\tinputData.positionWS
    = WorldPosition@$$\tuint meshRenderingLayers = GetMeshRenderingLayer()@$\tuint
    pixelLightCount = GetAdditionalLightsCount()@\t$$\t#if USE_FORWARD_PLUS$\tfor
    (uint lightIndex = 0@ lightIndex < min(URP_FP_DIRECTIONAL_LIGHTS_COUNT, MAX_VISIBLE_LIGHTS)@
    lightIndex++)$\t{$\t\tFORWARD_PLUS_SUBTRACTIVE_LIGHT_CHECK$$\t\tLight light =
    GetAdditionalLight(lightIndex, WorldPosition, ShadowMask)@$\t\t#ifdef _LIGHT_LAYERS$\t\tif
    (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))$\t\t#endif$\t\t{$\t\t\tSUM_LIGHT(
    light )@$\t\t}$\t}$\t#endif$$\tLIGHT_LOOP_BEGIN( pixelLightCount )$\t\tLight
    light = GetAdditionalLight(lightIndex, WorldPosition, ShadowMask)@$\t\t#ifdef
    _LIGHT_LAYERS$\t\tif (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))$\t\t#endif$\t\t{$\t\t\tSUM_LIGHT(
    light )@$\t\t}$\tLIGHT_LOOP_END$#endif$return Color@$;3;Create;3;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;ScreenUV;FLOAT2;0,0;In;;Inherit;False;True;ShadowMask;FLOAT4;0,0,0,0;In;;Inherit;False;AdditionalLightsFlatMask14x;False;False;0;;False;3;0;FLOAT3;0,0,0;False;1;FLOAT2;0,0;False;2;FLOAT4;0,0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;103;-220.9448,-1860.077;Inherit;False;float3
    Color = 0@$#ifdef _ADDITIONAL_LIGHTS$\tuint lightCount = GetAdditionalLightsCount()@$\tfor
    (uint lightIndex = 0u@ lightIndex < lightCount@ ++lightIndex)$\t{$\t\tLight light
    = GetAdditionalLight(lightIndex, WorldPosition)@$\t\thalf3 AttLightColor = light.color
    *(light.distanceAttenuation * light.shadowAttenuation)@$\t\tColor +=LightingLambert(AttLightColor,
    light.direction, WorldNormal)@$\t}$#endif$return Color@;3;Create;2;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;WorldNormal;FLOAT3;0,0,0;In;;Float;False;AdditionalLightsLambert10x;False;False;0;;False;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;37;-219.6496,-1754.912;Inherit;False;float3
    Color = 0@$#ifdef _ADDITIONAL_LIGHTS$\tuint lightCount = GetAdditionalLightsCount()@$\tLIGHT_LOOP_BEGIN(
    lightCount )$\t\tLight light = GetAdditionalLight(lightIndex, WorldPosition)@$\t\thalf3
    AttLightColor = light.color *(light.distanceAttenuation * light.shadowAttenuation)@$\t\tColor
    +=LightingLambert(AttLightColor, light.direction, WorldNormal)@$\tLIGHT_LOOP_END$#endif$return
    Color@;3;Create;2;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;WorldNormal;FLOAT3;0,0,0;In;;Float;False;AdditionalLightsLambert12x;False;False;0;;False;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;87;-220.0964,-1658.759;Inherit;False;float3
    Color = 0@$#if defined(_ADDITIONAL_LIGHTS)$\t#define SUM_LIGHT(Light)\\$\t\thalf3
    AttLightColor = Light.color * ( Light.distanceAttenuation * Light.shadowAttenuation
    )@\\$\t\tColor += LightingLambert( AttLightColor, Light.direction, WorldNormal
    )@$$\tInputData inputData = (InputData)0@$\tinputData.normalizedScreenSpaceUV
    = ScreenUV@$\tinputData.positionWS = WorldPosition@$$\tuint meshRenderingLayers
    = GetMeshRenderingLayer()@$\tuint pixelLightCount = GetAdditionalLightsCount()@$$\t#if
    USE_FORWARD_PLUS$\tfor (uint lightIndex = 0@ lightIndex < min(URP_FP_DIRECTIONAL_LIGHTS_COUNT,
    MAX_VISIBLE_LIGHTS)@ lightIndex++)$\t{$\t\tFORWARD_PLUS_SUBTRACTIVE_LIGHT_CHECK$$\t\tLight
    light = GetAdditionalLight(lightIndex, WorldPosition)@$\t\t#ifdef _LIGHT_LAYERS$\t\tif
    (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))$\t\t#endif$\t\t{$\t\t\tSUM_LIGHT(
    light )@$\t\t}$\t}$\t#endif$$\tLIGHT_LOOP_BEGIN( pixelLightCount )$\t\tLight
    light = GetAdditionalLight(lightIndex, WorldPosition)@$\t\t#ifdef _LIGHT_LAYERS$\t\tif
    (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))$\t\t#endif$\t\t{$\t\t\tSUM_LIGHT(
    light )@$\t\t}$\tLIGHT_LOOP_END$#endif$return Color@;3;Create;3;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;ScreenUV;FLOAT2;0,0;In;;Inherit;False;True;WorldNormal;FLOAT3;0,0,0;In;;Float;False;AdditionalLightsLambert14x;False;False;0;;False;3;0;FLOAT3;0,0,0;False;1;FLOAT2;0,0;False;2;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;102;-226.0668,-1502.694;Inherit;False;float3
    Color = 0@$#ifdef _ADDITIONAL_LIGHTS$\tuint lightCount = GetAdditionalLightsCount()@$\tfor
    (uint lightIndex = 0u@ lightIndex < lightCount@ ++lightIndex)$\t{$\t\t#if ASE_SRP_VERSION
    >= 100000$\t\tLight light = GetAdditionalLight(lightIndex, WorldPosition, ShadowMask)@$\t\t#else$\t\tLight
    light = GetAdditionalLight(lightIndex, WorldPosition)@$\t\t#endif$\t\thalf3 AttLightColor
    = light.color *(light.distanceAttenuation * light.shadowAttenuation)@$\t\tColor
    +=LightingLambert(AttLightColor, light.direction, WorldNormal)@$\t}$#endif$return
    Color@;3;Create;3;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;WorldNormal;FLOAT3;0,0,0;In;;Float;False;True;ShadowMask;FLOAT4;0,0,0,0;In;;Inherit;False;AdditionalLightsLambertMask10x;False;False;0;;False;3;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;2;FLOAT4;0,0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;5;-228.4399,-1390.053;Inherit;False;float3
    Color = 0@$#ifdef _ADDITIONAL_LIGHTS$\tuint lightCount = GetAdditionalLightsCount()@$\tLIGHT_LOOP_BEGIN(
    lightCount )$\t\t#if ASE_SRP_VERSION >= 100000$\t\tLight light = GetAdditionalLight(lightIndex,
    WorldPosition, ShadowMask)@$\t\t#else$\t\tLight light = GetAdditionalLight(lightIndex,
    WorldPosition)@$\t\t#endif$\t\thalf3 AttLightColor = light.color *(light.distanceAttenuation
    * light.shadowAttenuation)@$\t\tColor +=LightingLambert(AttLightColor, light.direction,
    WorldNormal)@$\tLIGHT_LOOP_END$#endif$return Color@;3;Create;3;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;WorldNormal;FLOAT3;0,0,0;In;;Float;False;True;ShadowMask;FLOAT4;0,0,0,0;In;;Inherit;False;AdditionalLightsLambertMask12x;False;False;0;;False;3;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;2;FLOAT4;0,0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;86;-229.4327,-1271.028;Inherit;False;float3
    Color = 0@$#if defined(_ADDITIONAL_LIGHTS)$\t#define SUM_LIGHT(Light)\\$\t\thalf3
    AttLightColor = Light.color * ( Light.distanceAttenuation * Light.shadowAttenuation
    )@\\$\t\tColor += LightingLambert( AttLightColor, Light.direction, WorldNormal
    )@$$\tInputData inputData = (InputData)0@$\tinputData.normalizedScreenSpaceUV
    = ScreenUV@$\tinputData.positionWS = WorldPosition@$$\tuint meshRenderingLayers
    = GetMeshRenderingLayer()@$\tuint pixelLightCount = GetAdditionalLightsCount()@\t$$\t#if
    USE_FORWARD_PLUS$\tfor (uint lightIndex = 0@ lightIndex < min(URP_FP_DIRECTIONAL_LIGHTS_COUNT,
    MAX_VISIBLE_LIGHTS)@ lightIndex++)$\t{$\t\tFORWARD_PLUS_SUBTRACTIVE_LIGHT_CHECK$$\t\tLight
    light = GetAdditionalLight(lightIndex, WorldPosition, ShadowMask)@$\t\t#ifdef
    _LIGHT_LAYERS$\t\tif (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))$\t\t#endif$\t\t{$\t\t\tSUM_LIGHT(
    light )@$\t\t}$\t}$\t#endif$\t$\tLIGHT_LOOP_BEGIN( pixelLightCount )$\t\tLight
    light = GetAdditionalLight(lightIndex, WorldPosition, ShadowMask)@$\t\t#ifdef
    _LIGHT_LAYERS$\t\tif (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))$\t\t#endif$\t\t{$\t\t\tSUM_LIGHT(
    light )@$\t\t}$\tLIGHT_LOOP_END$#endif$return Color@;3;Create;4;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;ScreenUV;FLOAT2;0,0;In;;Inherit;False;True;WorldNormal;FLOAT3;0,0,0;In;;Float;False;True;ShadowMask;FLOAT4;0,0,0,0;In;;Inherit;False;AdditionalLightsLambertMask14x;False;False;0;;False;4;0;FLOAT3;0,0,0;False;1;FLOAT2;0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT4;0,0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.GetLocalVarNode;57;-652.6795,-363.0575;Inherit;False;33;shadowMaskValue;1;0;OBJECT;;False;1;FLOAT4;0\nNode;AmplifyShaderEditor.GetLocalVarNode;80;-608.5418,-262.8445;Inherit;False;75;ScreenUV;1;0;OBJECT;;False;1;FLOAT2;0\nNode;AmplifyShaderEditor.GetLocalVarNode;48;-641.339,-774.2038;Inherit;False;44;worldPosValue;1;0;OBJECT;;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.GetLocalVarNode;54;-646.2298,-623.1941;Inherit;False;50;worldNormalValue;1;0;OBJECT;;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.SwitchBySRPVersionNode;82;226.3996,-497.1029;Inherit;False;7;0;FLOAT;0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.SwitchBySRPVersionNode;81;221.2221,-843.1039;Inherit;False;7;0;FLOAT;0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionSwitch;26;567.2393,-660.1464;Inherit;False;Option;False;0;2;3;In
    0;In 1;Instance;24;9;0;FLOAT;0;False;1;FLOAT;0;False;2;FLOAT;0;False;3;FLOAT;0;False;4;FLOAT;0;False;5;FLOAT;0;False;6;FLOAT;0;False;7;FLOAT;0;False;8;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.RegisterLocalVarNode;58;832.7565,-660.5375;Inherit;False;halfLambertResult;-1;True;1;0;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.CustomExpressionNode;105;-190.4574,-866.027;Inherit;False;float3
    Color = 0@$#ifdef _ADDITIONAL_LIGHTS$\tuint lightCount = GetAdditionalLightsCount()@$\tfor
    (uint lightIndex = 0u@ lightIndex < lightCount@ ++lightIndex)$\t{$\t\tLight light
    = GetAdditionalLight(lightIndex, WorldPosition)@$\t\thalf3 AttLightColor = light.color
    *(light.distanceAttenuation * light.shadowAttenuation)@$\t\tColor +=(dot(light.direction,
    WorldNormal)*0.5+0.5 )* AttLightColor@$\t}$#endif$return Color@;3;Create;2;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;WorldNormal;FLOAT3;0,0,0;In;;Float;False;AdditionalLightsHalfLambert10x;False;False;0;;False;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;22;-187.1699,-765.632;Inherit;False;float3
    Color = 0@$#ifdef _ADDITIONAL_LIGHTS$\tuint lightCount = GetAdditionalLightsCount()@$\tLIGHT_LOOP_BEGIN(
    lightCount )$\t\tLight light = GetAdditionalLight(lightIndex, WorldPosition)@$\t\thalf3
    AttLightColor = light.color *(light.distanceAttenuation * light.shadowAttenuation)@$\t\tColor
    +=(dot(light.direction, WorldNormal)*0.5+0.5 )* AttLightColor@$\tLIGHT_LOOP_END$#endif$return
    Color@;3;Create;2;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;WorldNormal;FLOAT3;0,0,0;In;;Float;False;AdditionalLightsHalfLambert12x;False;False;0;;False;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;79;-181.0889,-668.5869;Inherit;False;float3
    Color = 0@$#if defined(_ADDITIONAL_LIGHTS)$\t#define SUM_LIGHT(Light)\\$\t\thalf3
    AttLightColor = Light.color * ( Light.distanceAttenuation * Light.shadowAttenuation
    )@\\$\t\tColor += ( dot( Light.direction, WorldNormal ) * 0.5 + 0.5 )* AttLightColor@$$\tInputData
    inputData = (InputData)0@$\tinputData.normalizedScreenSpaceUV = ScreenUV@$\tinputData.positionWS
    = WorldPosition@$$\tuint meshRenderingLayers = GetMeshRenderingLayer()@$\tuint
    pixelLightCount = GetAdditionalLightsCount()@\t$$\t#if USE_FORWARD_PLUS$\tfor
    (uint lightIndex = 0@ lightIndex < min(URP_FP_DIRECTIONAL_LIGHTS_COUNT, MAX_VISIBLE_LIGHTS)@
    lightIndex++)$\t{$\t\tFORWARD_PLUS_SUBTRACTIVE_LIGHT_CHECK$$\t\tLight light =
    GetAdditionalLight(lightIndex, WorldPosition)@$\t\t#ifdef _LIGHT_LAYERS$\t\tif
    (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))$\t\t#endif$\t\t{$\t\t\tSUM_LIGHT(
    light )@$\t\t}$\t}$\t#endif$$\tLIGHT_LOOP_BEGIN( pixelLightCount )$\t\tLight
    light = GetAdditionalLight(lightIndex, WorldPosition)@$\t\t#ifdef _LIGHT_LAYERS$\t\tif
    (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))$\t\t#endif$\t\t{$\t\t\tSUM_LIGHT(
    light )@$\t\t}$\tLIGHT_LOOP_END$#endif$return Color@;3;Create;3;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;ScreenUV;FLOAT2;0,0;In;;Inherit;False;True;WorldNormal;FLOAT3;0,0,0;In;;Float;False;AdditionalLightsHalfLambert14x;False;False;0;;False;3;0;FLOAT3;0,0,0;False;1;FLOAT2;0,0;False;2;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;104;-189.7021,-524.1879;Inherit;False;float3
    Color = 0@$#ifdef _ADDITIONAL_LIGHTS$\tuint lightCount = GetAdditionalLightsCount()@$\tfor
    (uint lightIndex = 0u@ lightIndex < lightCount@ ++lightIndex)$\t{$\t\t#if ASE_SRP_VERSION
    >= 100000$\t\tLight light = GetAdditionalLight(lightIndex, WorldPosition, ShadowMask)@$\t\t#else$\t\tLight
    light = GetAdditionalLight(lightIndex, WorldPosition)@$\t\t#endif$\t\thalf3 AttLightColor
    = light.color *(light.distanceAttenuation * light.shadowAttenuation)@$\t\tColor
    +=(dot(light.direction, WorldNormal)*0.5+0.5 )* AttLightColor@$\t}$#endif$return
    Color@;3;Create;3;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;WorldNormal;FLOAT3;0,0,0;In;;Float;False;True;ShadowMask;FLOAT4;0,0,0,0;In;;Inherit;False;AdditionalLightsHalfLambertMask10x;False;False;0;;False;3;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;2;FLOAT4;0,0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;56;-191.5268,-401.0752;Inherit;False;float3
    Color = 0@$#ifdef _ADDITIONAL_LIGHTS$\tuint lightCount = GetAdditionalLightsCount()@$\tLIGHT_LOOP_BEGIN(
    lightCount )$\t\t#if ASE_SRP_VERSION >= 100000$\t\tLight light = GetAdditionalLight(lightIndex,
    WorldPosition, ShadowMask)@$\t\t#else$\t\tLight light = GetAdditionalLight(lightIndex,
    WorldPosition)@$\t\t#endif$\t\thalf3 AttLightColor = light.color *(light.distanceAttenuation
    * light.shadowAttenuation)@$\t\tColor +=(dot(light.direction, WorldNormal)*0.5+0.5
    )* AttLightColor@$\tLIGHT_LOOP_END$#endif$return Color@;3;Create;3;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;WorldNormal;FLOAT3;0,0,0;In;;Float;False;True;ShadowMask;FLOAT4;0,0,0,0;In;;Inherit;False;AdditionalLightsHalfLambertMask12x;False;False;0;;False;3;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;2;FLOAT4;0,0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;78;-189.9359,-278.8303;Inherit;False;float3
    Color = 0@$#if defined(_ADDITIONAL_LIGHTS)$\t#define SUM_LIGHT(Light)\\$\t\thalf3
    AttLightColor = Light.color * ( Light.distanceAttenuation * Light.shadowAttenuation
    )@\\$\t\tColor += ( dot( Light.direction, WorldNormal ) * 0.5 + 0.5 )* AttLightColor@$$\tInputData
    inputData = (InputData)0@$\tinputData.normalizedScreenSpaceUV = ScreenUV@$\tinputData.positionWS
    = WorldPosition@$$\tuint meshRenderingLayers = GetMeshRenderingLayer()@$\tuint
    pixelLightCount = GetAdditionalLightsCount()@\t$$\t#if USE_FORWARD_PLUS$\tfor
    (uint lightIndex = 0@ lightIndex < min(URP_FP_DIRECTIONAL_LIGHTS_COUNT, MAX_VISIBLE_LIGHTS)@
    lightIndex++)$\t{$\t\tFORWARD_PLUS_SUBTRACTIVE_LIGHT_CHECK$$\t\tLight light =
    GetAdditionalLight(lightIndex, WorldPosition, ShadowMask)@$\t\t#ifdef _LIGHT_LAYERS$\t\tif
    (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))$\t\t#endif$\t\t{$\t\t\tSUM_LIGHT(
    light )@$\t\t}$\t}$\t#endif$$\tLIGHT_LOOP_BEGIN( pixelLightCount )$\t\tLight
    light = GetAdditionalLight(lightIndex, WorldPosition, ShadowMask)@$\t\t#ifdef
    _LIGHT_LAYERS$\t\tif (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))$\t\t#endif$\t\t{$\t\t\tSUM_LIGHT(
    light )@$\t\t}$\tLIGHT_LOOP_END$#endif$return Color@;3;Create;4;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;ScreenUV;FLOAT2;0,0;In;;Inherit;False;True;WorldNormal;FLOAT3;0,0,0;In;;Float;False;True;ShadowMask;FLOAT4;0,0,0,0;In;;Inherit;False;AdditionalLightsHalfLambertMask14x;False;False;0;;False;4;0;FLOAT3;0,0,0;False;1;FLOAT2;0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT4;0,0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.SwitchBySRPVersionNode;71;266.2677,227.5355;Inherit;False;7;0;FLOAT;0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.CustomExpressionNode;106;-171.4763,149.2538;Inherit;False;float3
    Color = 0@$#ifdef _ADDITIONAL_LIGHTS$\tSmoothness = exp2(10 * Smoothness + 1)@$\tuint
    lightCount = GetAdditionalLightsCount()@$\tfor (uint lightIndex = 0u@ lightIndex
    < lightCount@ ++lightIndex)$\t{$\t\tLight light = GetAdditionalLight(lightIndex,
    WorldPosition)@$\t\thalf3 AttLightColor = light.color *(light.distanceAttenuation
    * light.shadowAttenuation)@$\t\tColor += LightingSpecular(AttLightColor, light.direction,
    WorldNormal, WorldView, half4(SpecColor, 0), Smoothness)@\t$\t}$#endif$return
    Color@;3;Create;5;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;WorldNormal;FLOAT3;0,0,0;In;;Float;False;True;WorldView;FLOAT3;0,0,0;In;;Float;False;True;SpecColor;FLOAT3;0,0,0;In;;Float;False;True;Smoothness;FLOAT;0.5;In;;Float;False;AdditionalLightsSpecular10x12x;False;False;0;;False;5;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT;0.5;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;13;-173.3304,313.1405;Inherit;False;float3
    Color = 0@$#ifdef _ADDITIONAL_LIGHTS$\tSmoothness = exp2(10 * Smoothness + 1)@$\tuint
    lightCount = GetAdditionalLightsCount()@$\tLIGHT_LOOP_BEGIN( lightCount )$\t\tLight
    light = GetAdditionalLight(lightIndex, WorldPosition)@$\t\thalf3 AttLightColor
    = light.color *(light.distanceAttenuation * light.shadowAttenuation)@$\t\tColor
    += LightingSpecular(AttLightColor, light.direction, WorldNormal, WorldView, half4(SpecColor,
    0), Smoothness)@\t$\tLIGHT_LOOP_END$#endif$return Color@;3;Create;5;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;WorldNormal;FLOAT3;0,0,0;In;;Float;False;True;WorldView;FLOAT3;0,0,0;In;;Float;False;True;SpecColor;FLOAT3;0,0,0;In;;Float;False;True;Smoothness;FLOAT;0.5;In;;Float;False;AdditionalLightsSpecular10x12x;False;False;0;;False;5;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT;0.5;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;70;-170.8696,476.8268;Inherit;False;float3
    Color = 0@$#if defined(_ADDITIONAL_LIGHTS)$\tSmoothness = exp2(10 * Smoothness
    + 1)@$\t$\t#define SUM_LIGHT(Light)\\$\t\thalf3 AttLightColor = light.color *
    ( light.distanceAttenuation * light.shadowAttenuation )@\\$\t\tColor += LightingSpecular(
    AttLightColor, light.direction, WorldNormal, WorldView, half4( SpecColor, 0 ),
    Smoothness )@\t$$\tInputData inputData = (InputData)0@$\tinputData.normalizedScreenSpaceUV
    = ScreenUV@$\tinputData.positionWS = WorldPosition@$$\tuint meshRenderingLayers
    = GetMeshRenderingLayer()@\t\t$\tuint pixelLightCount = GetAdditionalLightsCount()@\t$$\t#if
    USE_FORWARD_PLUS$\tfor (uint lightIndex = 0@ lightIndex < min(URP_FP_DIRECTIONAL_LIGHTS_COUNT,
    MAX_VISIBLE_LIGHTS)@ lightIndex++)$\t{$\t\tFORWARD_PLUS_SUBTRACTIVE_LIGHT_CHECK$$\t\tLight
    light = GetAdditionalLight(lightIndex, WorldPosition)@$\t\t#ifdef _LIGHT_LAYERS$\t\tif
    (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))$\t\t#endif$\t\t{$\t\t\tSUM_LIGHT(
    light )@$\t\t}$\t}$\t#endif$$\tLIGHT_LOOP_BEGIN( pixelLightCount )$\t\tLight
    light = GetAdditionalLight(lightIndex, WorldPosition)@$\t\t#ifdef _LIGHT_LAYERS$\t\tif
    (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))$\t\t#endif$\t\t{$\t\t\tSUM_LIGHT(
    light )@$\t\t}$\tLIGHT_LOOP_END$#endif$return Color@;3;Create;6;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;ScreenUV;FLOAT2;0,0;In;;Inherit;False;True;WorldNormal;FLOAT3;0,0,0;In;;Float;False;True;WorldView;FLOAT3;0,0,0;In;;Float;False;True;SpecColor;FLOAT3;0,0,0;In;;Float;False;True;Smoothness;FLOAT;0.5;In;;Float;False;AdditionalLightsSpecular14x;False;False;0;;False;6;0;FLOAT3;0,0,0;False;1;FLOAT2;0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT;0.5;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;107;-178.4878,691.2747;Inherit;False;float3
    Color = 0@$#ifdef _ADDITIONAL_LIGHTS$\tSmoothness = exp2(10 * Smoothness + 1)@$\tuint
    lightCount = GetAdditionalLightsCount()@$\tfor (uint lightIndex = 0u@ lightIndex
    < lightCount@ ++lightIndex)$\t{$\t\t#if ASE_SRP_VERSION >= 100000$\t\tLight light
    = GetAdditionalLight(lightIndex, WorldPosition, ShadowMask)@$\t\t#else$\t\tLight
    light = GetAdditionalLight(lightIndex, WorldPosition)@$\t\t#endif$\t\thalf3 AttLightColor
    = light.color *(light.distanceAttenuation * light.shadowAttenuation)@$\t\tColor
    += LightingSpecular(AttLightColor, light.direction, WorldNormal, WorldView, half4(SpecColor,
    0), Smoothness)@\t$\t}$#endif$return Color@;3;Create;6;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;WorldNormal;FLOAT3;0,0,0;In;;Float;False;True;WorldView;FLOAT3;0,0,0;In;;Float;False;True;SpecColor;FLOAT3;0,0,0;In;;Float;False;True;Smoothness;FLOAT;0.5;In;;Float;False;True;ShadowMask;FLOAT4;0,0,0,0;In;;Inherit;False;AdditionalLightsSpecularMask10x;False;False;0;;False;6;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT;0.5;False;5;FLOAT4;0,0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;63;-181.7017,874.0315;Inherit;False;float3
    Color = 0@$#ifdef _ADDITIONAL_LIGHTS$\tSmoothness = exp2(10 * Smoothness + 1)@$\tuint
    lightCount = GetAdditionalLightsCount()@$\tLIGHT_LOOP_BEGIN( lightCount )$\t\t#if
    ASE_SRP_VERSION >= 100000$\t\tLight light = GetAdditionalLight(lightIndex, WorldPosition,
    ShadowMask)@$\t\t#else$\t\tLight light = GetAdditionalLight(lightIndex, WorldPosition)@$\t\t#endif$\t\thalf3
    AttLightColor = light.color *(light.distanceAttenuation * light.shadowAttenuation)@$\t\tColor
    += LightingSpecular(AttLightColor, light.direction, WorldNormal, WorldView, half4(SpecColor,
    0), Smoothness)@\t$\tLIGHT_LOOP_END$#endif$return Color@;3;Create;6;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;WorldNormal;FLOAT3;0,0,0;In;;Float;False;True;WorldView;FLOAT3;0,0,0;In;;Float;False;True;SpecColor;FLOAT3;0,0,0;In;;Float;False;True;Smoothness;FLOAT;0.5;In;;Float;False;True;ShadowMask;FLOAT4;0,0,0,0;In;;Inherit;False;AdditionalLightsSpecularMask12x;False;False;0;;False;6;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT;0.5;False;5;FLOAT4;0,0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;69;-181.7875,1059.257;Inherit;False;float3
    Color = 0@$#if defined(_ADDITIONAL_LIGHTS)$\tSmoothness = exp2(10 * Smoothness
    + 1)@$\t$\t#define SUM_LIGHT(Light)\\$\t\thalf3 AttLightColor = light.color *
    ( light.distanceAttenuation * light.shadowAttenuation )@\\$\t\tColor += LightingSpecular(
    AttLightColor, light.direction, WorldNormal, WorldView, half4( SpecColor, 0 ),
    Smoothness )@\t$$\tInputData inputData = (InputData)0@$\tinputData.normalizedScreenSpaceUV
    = ScreenUV@$\tinputData.positionWS = WorldPosition@$$\tuint meshRenderingLayers
    = GetMeshRenderingLayer()@\t$\tuint pixelLightCount = GetAdditionalLightsCount()@\t$$\t#if
    USE_FORWARD_PLUS$\tfor (uint lightIndex = 0@ lightIndex < min(URP_FP_DIRECTIONAL_LIGHTS_COUNT,
    MAX_VISIBLE_LIGHTS)@ lightIndex++)$\t{$\t\tFORWARD_PLUS_SUBTRACTIVE_LIGHT_CHECK$$\t\tLight
    light = GetAdditionalLight(lightIndex, WorldPosition, ShadowMask)@$\t\t#ifdef
    _LIGHT_LAYERS$\t\tif (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))$\t\t#endif$\t\t{$\t\t\tSUM_LIGHT(
    light )@$\t\t}$\t}$\t#endif$$\tLIGHT_LOOP_BEGIN( pixelLightCount )$\t\tLight
    light = GetAdditionalLight(lightIndex, WorldPosition, ShadowMask)@$\t\t#ifdef
    _LIGHT_LAYERS$\t\tif (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))$\t\t#endif$\t\t{$\t\t\tSUM_LIGHT(
    light )@$\t\t}$\tLIGHT_LOOP_END$#endif$return Color@;3;Create;7;True;WorldPosition;FLOAT3;0,0,0;In;;Float;False;True;ScreenUV;FLOAT2;0,0;In;;Inherit;False;True;WorldNormal;FLOAT3;0,0,0;In;;Float;False;True;WorldView;FLOAT3;0,0,0;In;;Float;False;True;SpecColor;FLOAT3;0,0,0;In;;Float;False;True;Smoothness;FLOAT;0.5;In;;Float;False;True;ShadowMask;FLOAT4;0,0,0,0;In;;Inherit;False;AdditionalLightsSpecularMask14x;False;False;0;;False;7;0;FLOAT3;0,0,0;False;1;FLOAT2;0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT;0.5;False;6;FLOAT4;0,0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.GetLocalVarNode;77;-603.3779,1073.712;Inherit;False;75;ScreenUV;1;0;OBJECT;;False;1;FLOAT2;0\nNode;AmplifyShaderEditor.GetLocalVarNode;64;-642.8012,986.1133;Inherit;False;33;shadowMaskValue;1;0;OBJECT;;False;1;FLOAT4;0\nNode;AmplifyShaderEditor.GetLocalVarNode;35;-684.0006,-2366.363;Inherit;False;33;shadowMaskValue;1;0;OBJECT;;False;1;FLOAT4;0\nNode;AmplifyShaderEditor.GetLocalVarNode;90;-649.8591,-2276.084;Inherit;False;75;ScreenUV;1;0;OBJECT;;False;1;FLOAT2;0\nNode;AmplifyShaderEditor.GetLocalVarNode;41;-680.7431,-1347.587;Inherit;False;33;shadowMaskValue;1;0;OBJECT;;False;1;FLOAT4;0\nNode;AmplifyShaderEditor.GetLocalVarNode;83;-639.186,-1252.098;Inherit;False;75;ScreenUV;1;0;OBJECT;;False;1;FLOAT2;0\nNode;AmplifyShaderEditor.RegisterLocalVarNode;33;-1815.849,558.3054;Inherit;False;shadowMaskValue;-1;True;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0\nNode;AmplifyShaderEditor.WorldNormalVector;4;-2408.121,153.5377;Inherit;False;True;1;0;FLOAT3;0,0,1;False;4;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3\nNode;AmplifyShaderEditor.WorldNormalVector;12;-2213.121,-7.462296;Inherit;False;True;1;0;FLOAT3;0,0,1;False;4;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3\nWireConnection;9;0;12;0\nWireConnection;9;1;11;0\nWireConnection;11;0;4;0\nWireConnection;50;0;9;0\nWireConnection;44;0;3;0\nWireConnection;2;0;10;0\nWireConnection;75;0;76;0\nWireConnection;76;0;73;0\nWireConnection;32;0;99;0\nWireConnection;19;0;21;0\nWireConnection;19;3;21;0\nWireConnection;19;1;6;0\nWireConnection;19;2;21;0\nWireConnection;6;0;30;0\nWireConnection;6;1;23;0\nWireConnection;6;2;62;0\nWireConnection;23;0;39;0\nWireConnection;23;1;59;0\nWireConnection;0;0;19;0\nWireConnection;15;0;16;0\nWireConnection;72;1;107;0\nWireConnection;72;2;107;0\nWireConnection;72;3;63;0\nWireConnection;72;4;63;0\nWireConnection;72;5;69;0\nWireConnection;72;6;69;0\nWireConnection;27;0;71;0\nWireConnection;27;1;72;0\nWireConnection;61;0;27;0\nWireConnection;85;1;102;0\nWireConnection;85;2;102;0\nWireConnection;85;3;5;0\nWireConnection;85;4;5;0\nWireConnection;85;5;86;0\nWireConnection;85;6;86;0\nWireConnection;84;1;103;0\nWireConnection;84;2;103;0\nWireConnection;84;3;37;0\nWireConnection;84;4;37;0\nWireConnection;84;5;87;0\nWireConnection;84;6;87;0\nWireConnection;25;0;84;0\nWireConnection;25;1;85;0\nWireConnection;38;0;25;0\nWireConnection;88;1;100;0\nWireConnection;88;2;100;0\nWireConnection;88;3;8;0\nWireConnection;88;4;8;0\nWireConnection;88;5;91;0\nWireConnection;88;6;91;0\nWireConnection;89;1;101;0\nWireConnection;89;2;101;0\nWireConnection;89;3;31;0\nWireConnection;89;4;31;0\nWireConnection;89;5;92;0\nWireConnection;89;6;92;0\nWireConnection;29;0;24;0\nWireConnection;24;0;88;0\nWireConnection;24;1;89;0\nWireConnection;100;0;45;0\nWireConnection;8;0;45;0\nWireConnection;91;0;45;0\nWireConnection;91;1;90;0\nWireConnection;101;0;45;0\nWireConnection;101;1;35;0\nWireConnection;31;0;45;0\nWireConnection;31;1;35;0\nWireConnection;92;0;45;0\nWireConnection;92;1;90;0\nWireConnection;92;2;35;0\nWireConnection;103;0;47;0\nWireConnection;103;1;51;0\nWireConnection;37;0;47;0\nWireConnection;37;1;51;0\nWireConnection;87;0;47;0\nWireConnection;87;1;83;0\nWireConnection;87;2;51;0\nWireConnection;102;0;47;0\nWireConnection;102;1;51;0\nWireConnection;102;2;41;0\nWireConnection;5;0;47;0\nWireConnection;5;1;51;0\nWireConnection;5;2;41;0\nWireConnection;86;0;47;0\nWireConnection;86;1;83;0\nWireConnection;86;2;51;0\nWireConnection;86;3;41;0\nWireConnection;82;1;104;0\nWireConnection;82;2;104;0\nWireConnection;82;3;56;0\nWireConnection;82;4;56;0\nWireConnection;82;5;78;0\nWireConnection;82;6;78;0\nWireConnection;81;1;105;0\nWireConnection;81;2;105;0\nWireConnection;81;3;22;0\nWireConnection;81;4;22;0\nWireConnection;81;5;79;0\nWireConnection;81;6;79;0\nWireConnection;26;0;81;0\nWireConnection;26;1;82;0\nWireConnection;58;0;26;0\nWireConnection;105;0;48;0\nWireConnection;105;1;54;0\nWireConnection;22;0;48;0\nWireConnection;22;1;54;0\nWireConnection;79;0;48;0\nWireConnection;79;1;80;0\nWireConnection;79;2;54;0\nWireConnection;104;0;48;0\nWireConnection;104;1;54;0\nWireConnection;104;2;57;0\nWireConnection;56;0;48;0\nWireConnection;56;1;54;0\nWireConnection;56;2;57;0\nWireConnection;78;0;48;0\nWireConnection;78;1;80;0\nWireConnection;78;2;54;0\nWireConnection;78;3;57;0\nWireConnection;71;1;106;0\nWireConnection;71;2;106;0\nWireConnection;71;3;13;0\nWireConnection;71;4;13;0\nWireConnection;71;5;70;0\nWireConnection;71;6;70;0\nWireConnection;106;0;49;0\nWireConnection;106;1;55;0\nWireConnection;106;2;15;0\nWireConnection;106;3;14;0\nWireConnection;106;4;18;0\nWireConnection;13;0;49;0\nWireConnection;13;1;55;0\nWireConnection;13;2;15;0\nWireConnection;13;3;14;0\nWireConnection;13;4;18;0\nWireConnection;70;0;49;0\nWireConnection;70;1;77;0\nWireConnection;70;2;55;0\nWireConnection;70;3;15;0\nWireConnection;70;4;14;0\nWireConnection;70;5;18;0\nWireConnection;107;0;49;0\nWireConnection;107;1;55;0\nWireConnection;107;2;15;0\nWireConnection;107;3;14;0\nWireConnection;107;4;18;0\nWireConnection;107;5;64;0\nWireConnection;63;0;49;0\nWireConnection;63;1;55;0\nWireConnection;63;2;15;0\nWireConnection;63;3;14;0\nWireConnection;63;4;18;0\nWireConnection;63;5;64;0\nWireConnection;69;0;49;0\nWireConnection;69;1;77;0\nWireConnection;69;2;55;0\nWireConnection;69;3;15;0\nWireConnection;69;4;14;0\nWireConnection;69;5;18;0\nWireConnection;69;6;64;0\nWireConnection;33;0;32;0\nWireConnection;12;0;2;0\nASEEND*/\n//CHKSM=C0D561808621383D61507B09672436995454941A"
  m_functionName: 
  m_description: 'Returns SRP''s additional lights information calculated with the
    selected lighting mode.

    Shadow mask option only applied on SRP 10 or greater.
    Forward rendering only.'
  m_additionalIncludes:
    m_additionalIncludes: []
    m_outsideIncludes: []
  m_additionalPragmas:
    m_additionalPragmas: []
    m_outsidePragmas: []
  m_additionalDirectives:
    m_validData: 0
    m_isDirty: 1
    m_moduleName: ' Additional Directives'
    m_independentModule: 1
    m_customEdited: 0
    m_additionalDirectives:
    - {fileID: 0}
    - {fileID: 0}
    - {fileID: 0}
    m_shaderFunctionDirectives: []
    m_nativeDirectives: []
    m_nativeDirectivesIndex: -1
    m_nativeDirectivesFoldout: 0
    m_directivesSaveItems:
    - LineType: 2
      LineValue: multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS
      GUIDToggle: 0
      GUIDValue: 
      ShowConditionals: 1
      VersionMin: 0
      VersionMax: 0
      Passes: Forward
      Origin: 2
    - LineType: 2
      LineValue: multi_compile_fragment _ _ADDITIONAL_LIGHT_SHADOWS
      GUIDToggle: 0
      GUIDValue: 
      ShowConditionals: 1
      VersionMin: 0
      VersionMax: 0
      Passes: Forward
      Origin: 2
    - LineType: 2
      LineValue: multi_compile _ _FORWARD_PLUS
      GUIDToggle: 0
      GUIDValue: 
      ShowConditionals: 1
      VersionMin: 140000
      VersionMax: 0
      Passes: Forward
      Origin: 2
  m_nodeCategory: 3
  m_headerStyle: 1
  m_headerColor: {r: 1, g: 0.4, b: 0, a: 1}
  m_customNodeCategory: 
  m_previewPosition: 0
  m_hidden: 0
  m_url: 
